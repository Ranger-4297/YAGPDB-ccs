{{/*
		Made by ranger_4297 (765316548516380732)

	Trigger Type: `Regex`
	Trigger: `((add|remove)-?money)`

	©️ RhykerWells 2020-Present
	GNU, GPLV3 License
	Repository: https://github.com/Ranger-4297/YAGPDB-ccs
*/}}


{{/* Only edit below if you know what you're doing (: rawr */}}

{{$trigger := print `\A(?:\` .ServerPrefix `|<@!?` .BotUser.ID `>\*)` .CCTrigger}}
{{if not (reFind $trigger .Message.Content)}}
	{{return}}
{{end}}

{{/* Initiates variables */}}
{{$successColor := 0x00ff7b}}
{{$errorColor := 0xFF0000}}
{{$prefix := .ServerPrefix }}

{{/* Add, remove money */}}

{{/* Response */}}
{{$embed := sdict "author" (sdict "name" .User.Username "icon_url" (.User.AvatarURL "1024")) "timestamp" currentTime "color" $errorColor}}
{{$perms := split (index (split (exec "viewperms") "\n") 2) ", "}}
{{if not (or (in $perms "Administrator") (in $perms "ManageServer"))}}
	{{$embed.Set "description" (print "Insufficient permissions.\nTo use this command you need to have either `Administrator` or `ManageServer` permissions")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$economySettings := (dbGet 0 "EconomySettings").Value}}
{{if not $economySettings}}
	{{$embed.Set "description" (print "No `Settings` database found.\nPlease set it up with the default values using `" .ServerPrefix "server-set default`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$symbol := $economySettings.symbol}}
{{$bankDB := or (dbGet 0 "bank").Value sdict}}
{{if not .CmdArgs}}
	{{$embed.Set "description" (print "No `User` argument provided.\nSyntax is `" .Cmd " <User:Mention/ID> <Destination:Cash/Bank> <Amount:Amount>`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$user := index .CmdArgs 0}}
{{if not (getMember $user)}}
	{{$embed.Set "description" (print "Invalid `User` argument provided.\nSyntax is `" .Cmd " <User:Mention/ID> <Destination:Cash/Bank> <Amount:Amount>`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$user = (getMember $user).User.ID}}
{{if not (gt (len .CmdArgs) 1)}}
	{{$embed.Set "description" (print "No `Destination` argument provided.\nSyntax is `" .Cmd " <User:Mention/ID> <Destination:Cash/Bank> <Amount:Amount>`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$moneyDestination := index .CmdArgs 1 | lower}}
{{if not (eq $moneyDestination "cash" "bank")}}
	{{$embed.Set "description" (print "Invalid `Destination` argument provided.\nSyntax is `" .Cmd " <User:Mention/ID> <Destination:Cash/Bank> <Amount:Amount>`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{if not (gt (len .CmdArgs) 2)}}
	{{$embed.Set "description" (print "No `Amount` argument provided.\nSyntax is `" .Cmd " <User:Mention/ID> <Destination:Cash/Bank> <Amount:Amount>`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$amount := index .CmdArgs 2}}
{{if and (not (toInt $amount)) (lt (toInt $amount) 1)}}
	{{$embed.Set "description" (print "Invalid `Amount` argument provided.\nSyntax is `" .Cmd " <User:Mention/ID> <Destination:Cash/Bank> <Amount:Amount>`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$amount = toInt $amount}}
{{$opt := ""}}
{{$balance := ""}}
{{$bankUser := or ($bankDB.Get (str $user)) 0 | toInt}}
{{$cash := or (dbGet $user "cash").Value 0 | toInt}}
{{if eq $moneyDestination "bank"}}{{$balance = $bankUser}}{{else}}{{$balance = $cash}}{{end}}
{{if (reFind `remove-?money|dec(rease)?-?money` .Cmd)}}
	{{$opt = "removed"}}
	{{$balance = $amount | sub $balance}}
{{else if (reFind `add-?money|inc(crease)?-?money` .Cmd)}}
	{{$opt = "added"}}
	{{$balance = $balance | add $amount}}
{{end}}
{{$embed.Set "description" (print "You " $opt " " $symbol (humanizeThousands $amount) " to <@!" $user ">'s " $moneyDestination "\nThey now have " $symbol (humanizeThousands $balance) " in their " $moneyDestination "!")}}
{{$embed.Set "color" $successColor}}
{{if eq $moneyDestination "bank"}}
	{{$bankDB.Set (toString $user) $balance}}
{{else}}
	{{$cash = $balance}}
{{end}}
{{dbSet 0 "bank" $bankDB}}
{{dbSet $user "cash" $cash}}
{{sendMessage nil (cembed $embed)}}