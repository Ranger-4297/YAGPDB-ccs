{{/*
		Made by ranger_4297 (765316548516380732)

	Trigger Type: `Regex`
	Trigger: `(remove-?item)`

	©️ RhykerWells 2020-Present
	GNU, GPLV3 License
	Repository: https://github.com/Ranger-4297/YAGPDB-ccs
*/}}


{{/* Only edit below if you know what you're doing (: rawr */}}

{{$trigger := print `\A(?:\` .ServerPrefix `|<@!?` .BotUser.ID `>\*)` .CCTrigger}}
{{if not (reFind $trigger .Message.Content)}}
	{{return}}
{{end}}

{{/* Initiates variables */}}
{{$userID := .User.ID}}
{{$successColor := 0x00ff7b}}
{{$errorColor := 0xFF0000}}
{{$prefix := .ServerPrefix }}
{{$ex := or (and (reFind "a_" .Guild.Icon) "gif") "png"}}
{{$icon := print "https://cdn.discordapp.com/icons/" .Guild.ID "/" .Guild.Icon "." $ex "?size=1024"}}

{{/* Remove item */}}

{{/* Response */}}
{{$embed := sdict "author" (sdict "name" (print .Guild.Name " Store")) "timestamp" currentTime "color" $errorColor}}
{{$economySettings := (dbGet 0 "EconomySettings").Value}}
{{if not $economySettings}}
	{{$embed.Set "description" (print "No `Settings` database found.\nPlease set it up with the default values using `" .ServerPrefix "server-set default`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$symbol := $economySettings.symbol}}
{{$store := (dbGet 0 "store").Value}}
{{if not $store}}
	{{$embed.Set "description" (print "The shop is empty :(\nAdd some items with `" $prefix "create-item`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{if not .CmdArgs}}
	{{$embed.Set "description" (print "No `Item` argument provided.\nSyntax is `" .Cmd " <Name>`\n\nTo view all items, run the `" $prefix "shop` command")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$name := index .CmdArgs 0}}
{{$items := cslice}}
{{$item := sdict}}
{{range $store}}
	{{- if eq .name $name -}}
		{{- $items = $items.Append . -}}
	{{end}}
{{end}}
{{if not (len $items)}}
	{{$embed.Set "description" (print "This item doesn't exist")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{if gt (len $items) 1}}
	{{$items = sort $items (sdict "key" "price")}}
	{{$matchedItems := cslice}}
	{{range $k, $item := $items}}
		{{$qty := $item.quantity}}
		{{if $qty}}
			{{$qty = humanizeThousands $qty}}
		{{else}}
			{{$qty = "Infinite"}}
		{{end}}
		{{$itemInfo :=  (print (add $k 1) " | " $symbol (humanizeThousands $item.price) " - " $item.name " - " $qty)}}
		{{$matchedItems = $matchedItems.Append (sdict "Name" $itemInfo "value" $item.desc "inline" false)}}
	{{end}}
	{{if not (gt (len .CmdArgs) 1)}}
		{{$embed.Set "description" (print "Multiple " $name "'s in the shop. Please specify with `" .Cmd " " $name " <Entry:Num>`")}}
		{{$embed.Set "fields" $matchedItems}}
		{{sendMessage nil (cembed $embed)}}
		{{return}}
	{{end}}
	{{$entry := (index .CmdArgs 1) | toInt}}
	{{if or (not $entry) (gt $entry (len $matchedItems))}}
		{{$embed.Set "description" (print "Invalid `entry` argument passed. Please specify with `" .Cmd " " $name " <Entry:Num>`")}}
		{{$embed.Set "fields" $matchedItems}}
		{{sendMessage nil (cembed $embed)}}
		{{return}}
	{{end}}
	{{$item = (index $items (sub $entry 1))}}
{{else}}
	{{$item = (index $items 0)}}
{{end}}
{{$newStore := cslice}}
{{range $k, $v := $store}}
	{{if eq (json $v) (json $item)}}
		{{continue}}
	{{end}}
	{{$newStore = $newStore.Append $v}}
{{end}}
{{$embed.Set "description" (print "Removed " $name " successfully!")}}
{{$embed.Set "color" $successColor}}
{{dbSet 0 "store" $newStore}}
{{sendMessage nil (cembed $embed)}}