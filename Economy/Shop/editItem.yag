{{/*
		Made by ranger_4297 (765316548516380732)

	Trigger Type: `Regex`
	Trigger: `(edit-?item)`

	©️ RhykerWells 2020-Present
	GNU, GPLV3 License
	Repository: https://github.com/Ranger-4297/YAGPDB-ccs
*/}}


{{/* Only edit below if you know what you're doing (: rawr */}}

{{$trigger := print `\A(?:\` .ServerPrefix `|<@!?` .BotUser.ID `>\*)` .CCTrigger}}
{{if not (reFind $trigger .Message.Content)}}
	{{return}}
{{end}}

{{/* Initiates variables */}}
{{$successColor := 0x00ff7b}}
{{$errorColor := 0xFF0000}}
{{$prefix := .ServerPrefix}}
{{$ex := or (and (reFind "a_" .Guild.Icon) "gif") "png"}}
{{$icon := print "https://cdn.discordapp.com/icons/" .Guild.ID "/" .Guild.Icon "." $ex "?size=1024"}}

{{/* edits item */}}

{{/* Response */}}
{{$embed := sdict "author" (sdict "name" (print .Guild.Name " Store") "icon_url" $icon) "timestamp" currentTime "color" $errorColor}}
{{$perms := split (index (split (exec "viewperms") "\n") 2) ", "}}
{{if not (or (in $perms "Administrator") (in $perms "ManageServer"))}}
	{{$embed.Set "description" (print "Insufficient permissions.\nTo use this command you need to have either `Administrator` or `ManageServer` permissions")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$economySettings := (dbGet 0 "EconomySettings").Value}}
{{if not $economySettings}}
	{{$embed.Set "description" (print "No `Settings` database found.\nPlease set it up with the default values using `" .ServerPrefix "server-set default`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$symbol := $economySettings.symbol}}
{{$store := (dbGet 0 "store").Value}}
{{if not $store}}
	{{$embed.Set "description" (print "The shop is empty :(\nAdd some items with `" $prefix "create-item`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{if not .CmdArgs}}
	{{$embed.Set "description" (print "No `Item` argument provided\nSyntax is `" .Cmd " <Item:Name> <Option> <Value>`\nUse `" $prefix "shop` to view the items!")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$item := index .CmdArgs 0}}
{{$items := cslice}}
{{range $k, $v := $store}}
	{{$items = $items.Append $v.name}}
{{end}}
{{if not (inFold $items $item)}}
	{{$embed.Set "description" (print "This item doesn't exist`\nUse `" $prefix "shop` to view the items!")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$options := cslice "name" "quantity" "price" "description" "replymsg" "role" "expiry"}}
{{if not (gt (len .CmdArgs) 1)}}
	{{$embed.Set "description" (print "No `Option` argument provided\nSyntax is `" .Cmd " <Item:Name> <Option> <Value>`\nAvailable options are: `" (joinStr "`, `" $options) "`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$option := index .CmdArgs 1 | lower}}
{{if not (in $options $option)}}
	{{$embed.Set "description" (print "Invalid `Option` argument provided\nSyntax is `" .Cmd " <Name> <Option:String> <Value>`\nAvailable options are: `name`, `description`, `price`, `quantity`, `expiry` and `role``")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$value := ""}}
{{if not (gt (len .CmdArgs) 2)}}
	{{$embed.Set "description" (print "No `Value` argument provided\nSyntax is `" .Cmd " <Item:Name> <Option> <Value>`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{if eq $option "name"}}
	{{$value = index .CmdArgs 2}}
{{else if eq $option "quantity"}}
	{{$value = index .CmdArgs 2}}
	{{if not (or (ge (toInt $value) 1) (eq (lower $value) "infinite" "infinity" "inf"))}}
		{{$embed.Set "description" (print "Invalid `Value` argument provided\nSyntax is `" .Cmd " " $item " " $option " <Quantity:Int/Infinity>`")}}
		{{sendMessage nil (cembed $embed)}}
		{{return}}
	{{end}}
	{{if not ($value = toInt $value)}}
		{{$value = 0}}
	{{end}}
{{else if eq $option "price"}}
	{{$value = index .CmdArgs 2 | toInt}}
	{{if not (and $value (gt $value 0))}}
		{{$embed.Set "description" (print "Invalid `Value` argument provided\nSyntax is `" .Cmd " <Item:Name> <Option> <Value>`")}}
		{{sendMessage nil (cembed $embed)}}
		{{return}}
	{{end}}
{{else if eq $option "description" "replymsg"}}
	{{$value = joinStr " " (slice .CmdArgs 2)}}
	{{if eq $option "description"}}
		{{$option = "desc"}}
	{{else}}
		{{$option = "replyMsg"}}
	{{end}}
{{else if eq $option "role"}}
	{{$role := index .CmdArgs 2}}
	{{if not (or (getRole $role) (eq (lower $role) "none" "remove"))}}
		{{$embed.Set "description" (print "Invalid `Value` argument provided\nSyntax is `" .Cmd " <Item:Name> <Option> <Value>`")}}
		{{sendMessage nil (cembed $embed)}}
		{{return}}
	{{end}}
	{{$value = getRole $role}}
	{{if not $value}}
		{{$value = 0}}
	{{else}}
		{{$value = $value.ID}}
	{{end}}
{{else if eq $option "expiry"}}
	{{if not (gt (len .CmdArgs) 2)}}
		{{$embed.Set "description" (print "No `Value` argument provided\nSyntax is `" .Cmd " <Item:Name> <Option> <Value>`")}}
		{{sendMessage nil (cembed $embed)}}
		{{return}}
	{{end}}
	{{if not (or (toDuration $value) (eq (lower $value) "none" "remove"))}}
		{{$embed.Set "description" (print "Invalid `Value` argument provided\nSyntax is `" .Cmd " <Item:Name> <Option> <Value>`")}}
		{{sendMessage nil (cembed $embed)}}
		{{return}}
	{{end}}
	{{$value = index .CmdArgs 2}}
{{end}}
{{range $store}}
	{{if eq .name $item}}
		{{.Set $option $value}}
	{{end}}
{{end}}
{{$valueDisplay := ""}}
{{if eq $option "name"}}
	{{$valueDisplay = $item}}
{{else if eq $option "quantity"}}
	{{if toInt $value}}
		{{$valueDisplay = humanizeThousands $value}}
	{{else}}
		{{$valueDisplay = "Infinite"}}
	{{end}}
{{else if eq $option "price"}}
	{{$valueDisplay = (print $symbol (humanizeThousands $value))}}
{{else if eq $option "desc" "replyMsg"}}
	{{$valueDisplay = (print "\"" $value "\"")}}
{{else if eq $option "role"}}
	{{if not $value}}
		{{$valueDisplay = "None"}}
	{{else}}
		{{$valueDisplay = print "<@&" $value ">"}}
	{{end}}
{{else}}
	{{$valueDisplay = humanizeDurationSeconds (mult $value .TimeSecond)}}
{{end}}
{{$embed.Set "color" $successColor}}
{{$embed.Set "description" (print $item "'s `" $option "` has been changed to " $valueDisplay)}}
{{sendMessage nil (cembed $embed)}}
{{dbSet 0 "store" $store}}