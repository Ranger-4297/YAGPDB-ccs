{{/*
		Made by ranger_4297 (765316548516380732)

	Trigger Type: `Regex`
	Trigger: `(inv(entory)?)`

	©️ RhykerWells 2020-Present
	GNU, GPLV3 License
	Repository: https://github.com/Ranger-4297/YAGPDB-ccs
*/}}


{{/* Only edit below if you know what you're doing (: rawr */}}

{{$trigger := print `\A(?:\` .ServerPrefix `|<@!?` .BotUser.ID `>\*)` .CCTrigger}}
{{if not (reFind $trigger .Message.Content)}}
	{{return}}
{{end}}

{{/* Initiates variables */}}
{{$user := .User}}
{{$successColor := 0x00ff7b}}
{{$errorColor := 0xFF0000}}
{{$prefix := .ServerPrefix }}

{{/* Server shop */}}

{{/* Response */}}
{{$embed := sdict "author" (sdict "name" (print .User.Username " inventory") "icon_url" (.User.AvatarURL "1024")) "timestamp" currentTime "color" $errorColor}}
{{$buttons := cslice (sdict "label" "previous" "style" "danger" "custom_id" "economy_back" "disabled" true) (sdict "label" "next" "style" "success" "custom_id" "economy_forward" "disabled" true)}}
{{$economySettings := (dbGet 0 "EconomySettings").Value}}
{{if not $economySettings}}
	{{$embed.Set "description" (print "No `Settings` database found.\nPlease set it up with the default values using `" .ServerPrefix "server-set default`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$symbol := $economySettings.symbol}}
{{with .CmdArgs}}
	{{if $newUser := (index . 0) | userArg}}
		{{$user = $newUser}}
	{{end}}
{{end}}
{{$page := 1}}
{{$author := sdict "name" (print $user.Username " inventory") "icon_url" ($user.AvatarURL "1024")}}
{{$embed.Set "author" $author }}
{{$userdata := or (dbGet $user.ID "userEconData").Value (sdict "inventory" sdict)}}
{{$inventory := $userdata.inventory}}
{{if not $inventory }}
	{{$embed.Set "description" (print "This users inventory is empty :(\nThey should get some items from the shop!")}}
	{{$embed.Set "footer" (sdict "text" (print "Page: " $page))}}
	{{sendMessage nil (complexMessage "embed" $embed "reply" .Message.ID)}}
	{{return}}
{{end}}
{{$display := ""}}
{{$entry := cslice}}
{{$fields := cslice}}
{{range $item, $itemValue := $inventory}}
	{{$desc := $itemValue.desc}}
	{{$qty := $itemValue.quantity}}
	{{$role := $itemValue.role}}
	{{if $role}}
		{{$role = print "<@&" $role ">"}}
	{{else}}
		{{$role = "none"}}
	{{end}}
	{{$expiry := $itemValue.expiry}}
	{{$expires := "never"}}
	{{if $expiry}}
		{{$timeSeconds := toDuration (humanizeDurationSeconds (mult $expiry .TimeSecond))}}
		{{$expires = (print "<t:" (currentTime.Add $timeSeconds).Unix ":f>")}}
	{{end}}
	{{$entry = $entry.Append (sdict "Name" $item "Value" (print "\nDescription: " $desc "\nQuantity: " (humanizeThousands $qty) "\nRole given: " $role "\nExpiry: " $expires))}}
{{end}}
{{if .CmdArgs}}
	{{$page = (index .CmdArgs 0) | toInt}}
	{{if lt $page 1}}
		{{$page = 1}}
	{{end}}
{{end}}
{{$start := mult 10 (sub $page 1)}}
{{$stop := mult $page 10}}
{{if ge $stop (len $entry)}}
	{{$stop = (len $entry)}}
{{end}}
{{if not (and (le $start $stop) (ge (len $entry) $start) (le $stop (len $entry)))}}
	{{$display = "This page is empty"}}
{{else}}
	{{range (seq $start $stop)}}
		{{$fields = $fields.Append (index $entry .)}}
	{{end}}
	{{$embed.Set "fields" $fields}}
	{{$embed.Set "color" $successColor}}
{{end}}
{{if gt (len $inventory) $stop}}
	{{(index $buttons 1).Set "disabled" false}}
{{end}}
{{if ne $page 1}}
	{{(index $buttons 0).Set "disabled" false}}
{{end}}
{{$embed.Set "description" $display}}
{{$embed.Set "footer" (sdict "text" (print "Page: " $page))}}
{{sendMessage nil (complexMessage "reply" .Message.ID "embed" $embed "buttons" $buttons)}}