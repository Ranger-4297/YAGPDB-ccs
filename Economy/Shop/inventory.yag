{{/*
		Made by ranger_4297 (765316548516380732)

	Trigger Type: `Regex`
	Trigger: `(inv(entory)?)`

	©️ RhykerWells 2020-Present
	GNU, GPLV3 License
	Repository: https://github.com/Ranger-4297/YAGPDB-ccs
*/}}


{{/* Only edit below if you know what you're doing (: rawr */}}

{{$trigger := print `\A(?:\` .ServerPrefix `|<@!?` .BotUser.ID `>\*)` .CCTrigger}}
{{if not (reFind $trigger .Message.Content)}}
	{{return}}
{{end}}

{{/* Initiates variables */}}
{{$user := .User}}
{{$successColor := 0x00ff7b}}
{{$errorColor := 0xFF0000}}
{{$prefix := .ServerPrefix }}

{{/* Server shop */}}

{{/* Response */}}
{{$embed := sdict "author" (sdict "name" (print .User.Username " inventory") "icon_url" (.User.AvatarURL "1024")) "timestamp" currentTime "color" $errorColor}}
{{$buttons := cslice (sdict "label" "previous" "style" "danger" "custom_id" "economy_back" "disabled" true) (sdict "label" "next" "style" "success" "custom_id" "economy_forward" "disabled" true)}}
{{$economySettings := (dbGet 0 "EconomySettings").Value}}
{{if not $economySettings}}
	{{$embed.Set "description" (print "No `Settings` database found.\nPlease set it up with the default values using `" .ServerPrefix "server-set default`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$symbol := $economySettings.symbol}}
{{$userdata := or (dbGet $user.ID "userEconData").Value (sdict "inventory" sdict)}}
{{$inventory := $userdata.inventory}}
{{if not $inventory }}
	{{$embed.Set "description" (print "This users inventory is empty :(\nThey should get some items from the shop!")}}
	{{sendMessage nil (complexMessage "embed" $embed "reply" .Message.ID)}}
	{{return}}
{{end}}
{{$inventory = sort $inventory (sdict "key" "quantity")}}
{{$items := cslice}}
{{$page := 1}}
{{if .CmdArgs}}
	{{$page = (index .CmdArgs 0) | toInt}}
	{{if lt $page 1}}
		{{$page = 1}}
	{{end}}
{{end}}
{{$start := mult 10 (sub $page 1)}}
{{$stop := mult $page 10}}
{{if ge $stop (len $inventory)}}
	{{$stop = (len $inventory)}}
{{end}}
{{if not (and (le $start $stop) (ge (len $inventory) $start) (le $stop (len $inventory)))}}
	{{$embed.Set "description" (print "There are no items on this page\nGet some with `buyitem`")}}
{{else}}
	{{range (seq $start $stop)}}
		{{$item := (index $inventory .)}}
		{{$desc := $item.desc}}
		{{$quantity := humanizeThousands $item.quantity}}
		{{$role := $item.role}}
		{{if $role}}
			{{$role = print "<@&" $role ">"}}
		{{else}}
			{{$role = "none"}}
		{{end}}
		{{$expiry := $item.expiry}}
		{{$expires := "never"}}
		{{if $expiry}}
			{{$expires = (print (toDuration (humanizeDurationSeconds (mult $expiry $.TimeSecond))) " from purchase")}}
		{{end}}
		{{$items = $items.Append (sdict "Name" $item.name "Value" (print "\nDescription: " $desc "\nQuantity: " $quantity "\nRole given: " $role "\nExpiry: " $expires))}}
	{{end}}
	{{$embed.Set "description" (print "Buy an item with `buy-item <Name> [Quantity:Int]`\nFor more information on an item use `item-info <Name>`.")}}
	{{$embed.Set "fields" $items}}
	{{$embed.Set "color" $successColor}}
{{end}}
{{if gt (len $inventory) $stop}}
	{{(index $buttons 1).Set "disabled" false}}
{{end}}
{{if ne $page 1}}
	{{(index $buttons 0).Set "disabled" false}}
{{end}}
{{$embed.Set "footer" (sdict "text" (print "Page: " $page))}}
{{sendMessage nil (complexMessage "reply" .Message.ID "embed" $embed "buttons" $buttons)}}