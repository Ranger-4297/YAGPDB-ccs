{{/*
		Made by ranger_4297 (765316548516380732)

	Trigger Type: `Regex`
	Trigger: `(sell)`

	©️ RhykerWells 2020-Present
	GNU, GPLV3 License
	Repository: https://github.com/Ranger-4297/YAGPDB-ccs
*/}}


{{/* Only edit below if you know what you're doing (: rawr */}}

{{$trigger := print `\A(?:\` .ServerPrefix `|<@!?` .BotUser.ID `>\*)` .CCTrigger}}
{{if not (reFind $trigger .Message.Content)}}
	{{return}}
{{end}}

{{/* Initiates variables */}}
{{$userID := .User.ID}}
{{$successColor := 0x00ff7b}}
{{$errorColor := 0xFF0000}}
{{$prefix := .ServerPrefix}}

{{/* Sell  */}}

{{/* Response */}}
{{$embed := sdict "author" (sdict "name" .User.Username "icon_url" (.User.AvatarURL "1024")) "timestamp" currentTime "color" $errorColor}}
{{$economySettings := (dbGet 0 "EconomySettings").Value}}
{{if not $economySettings}}
	{{$embed.Set "description" (print "No `Settings` database found.\nPlease set it up with the default values using `" .ServerPrefix "server-set default`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$symbol := $economySettings.symbol}}
{{$userData := or (dbGet $userID "userEconData").Value (sdict "settings" (sdict "balance" "yes" "inventory" "yes" "leaderboard" "yes" "trading" "yes") "inventory" sdict "streaks" (sdict "daily" 0 "weekly" 0 "monthly" 0))}}
{{$inventory := $userData.inventory}}
{{$store := or (dbGet 0 "store").Value (sdict "items" sdict)}}
{{$items := $store.items}}
{{if not .CmdArgs}}
	{{$embed.Set "description" (print "No `Item` argument provided.\nSyntax is `" .Cmd " <Item:Name> <Price:Int> [Quantity:Int/All]`\n\nTo view your items, run `" $prefix "inventory`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$item := index .CmdArgs 0}}
{{if not ($inventory.Get $item)}}
	{{$embed.Set "description" (print "Invalid `Item` argument provided.\nSyntax is `" .Cmd " <Item:Name> <Price:Int> [Quantity:Int/All]`\n\nTo view your items, run `" $prefix "inventory`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$invData := $inventory.Get $item}}
{{$invQuantity := $invData.quantity}}
{{$shopItem := print $item "." .User.Username}}
{{if lt (len .CmdArgs) 2}}
	{{$embed.Set "description" (print "No `Price` argument provided.\nSyntax is `" .Cmd " <Item:Name> <Price:Int> [Quantity:Int/All]`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$price := index .CmdArgs 1}}
{{if not (and ($price := toInt $price) (gt $price 0))}}
	{{$embed.Set "description" (print "Invalid `Price` argument provided.\nSyntax is `" .Cmd " <Item:Item name> <Price:Int> [Quantity:Int/All]`")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$sellQuantity := 1}}
{{$cont := 1}}
{{if gt (len .CmdArgs) 2}}
	{{$sellQuantity = index .CmdArgs 2}}
	{{if or (not (and (toInt $sellQuantity) (gt (toInt $sellQuantity) 0))) (ne (lower $sellQuantity) "all")}}
		{{$embed.Set "description" (print "Invalid `Quantity` argument provided.\nSyntax is `" .Cmd "<Item:Item name> <Price:Int> [Quantity:Int/All]`")}}
		{{sendMessage nil (cembed $embed)}}
		{{return}}
	{{end}}
	{{if toInt $sellQuantity}}
		{{if lt (toInt $sellQuantity) (toInt $invQuantity)}}
			{{$embed.Set "description" (print "You don't have enough of this to sell!")}}
			{{sendMessage nil (cembed $embed)}}
			{{return}}
		{{end}}
	{{else}}
		{{$sellQuantity = $invQuantity}}
	{{end}}
{{end}}
{{$invQuantity = sub $invQuantity $sellQuantity}}
{{if eq $item "chicken"}}
	{{$embed.Set "description" (print "You cannot sell this item.")}}
	{{sendMessage nil (cembed $embed)}}
	{{return}}
{{end}}
{{$shopData := $invData}}
{{$shopData.Del "expiry"}}
{{$shopData.Set "quantity" $sellQuantity}}
{{$shopData.Set "price" $price}}
{{if $items.Get $shopItem}}
	{{$shopData.Set "quantity" (add ($items.Get $shopItem).quantity $sellQuantity)}}
	{{$shopData.Set "price" $price}}
{{end}}
{{$items.Set $shopItem $shopData}}
{{$embed.Set "description" (print "You've added " $sellQuantity " " $item "(s) to the shop. Selling for " $symbol $price "\nThis item is listed as `" $shopItem "`")}}
{{$embed.Set "color" $successColor}}
{{if not $invQuantity}}
	{{$inventory.Del $item}}
{{else}}
	{{$invData.Set "quantity" $invQuantity}}
{{end}}
{{dbSet $userID "userEconData" $userData}}
{{dbSet 0 "store" $store}}
{{sendMessage nil (cembed $embed)}}